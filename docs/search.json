[
  {
    "objectID": "GA.html",
    "href": "GA.html",
    "title": "Genetic Algorithms in R",
    "section": "",
    "text": "GA hay Genetic Algorithm là 1 thuật toán tối ưu hóa ngẫu nhiên (stochastic search algorithms), được phát triển dựa trên lý thuyết tiến hóa và sự chọn lọc tự nhiên của sinh học (Luca Scrucca 2013).\nỞ thời cấp 3, bạn đã từng học về lý thuyết tiến hóa và chọn lọc tự nhiên của Charles Darwin và Alfred Russel ở môn Sinh học. Nếu bạn cũng từng liệt Sinh như tôi thì bạn quên cũng không sao 😅😅. Vậy thì để tôi giải thích lại như sau:\nSự tiến hóa là sự thay đổi đặc điểm di truyền của 1 quần thể sinh vật, ví dụ điển hình chính là từ loại vượn đã tiến hóa thành hình dạng con người văn minh như các bạn bây giờ. Vậy quá trình tiến hóa đó diễn ra khi có sự chọn lọc tự nhiên tạo ra các biến dị di truyền (Ví dụ: đột biến,…) và kết quả là các cá thể đột biến trở nên phổ biến hơn hoặc hiếm gặp hơn trong quần thể. Vậy điều kiện để xảy ra sự chọn lọc tự nhiên có thể là sự thay đổi về môi trường sống, địa lý,… dẫn tới sự khác nhau về khả năng sống sót và sinh sản.\nKết cục là xuất hiện các cá thể đột biến “mạnh mẽ hơn” hoặc đúng là “đặc biệt hơn” có khả năng tồn tại khi xuất hiện sự thay đổi lớn, ví dụ như dưới đây, do sự thay đổi về địa điểm sống, từ một loại chim sẻ đã phát triển thành 3 phân họ khác nhau.\n\n  \n  \n  \n  \n    Hình 1: Ví dụ về chọn lọc tự nhiên\n  \n  \n  \n  \n    Source: Link to Image\n  \n\nVậy lí thuyết này liên quan gì tới vấn đề tối ưu hóa. Thông thường khi bạn muốn tối ưu hóa một vấn đề gì đó, bạn cần xây dựng mô hình định lượng nó, ví dụ như dưới ảnh này ta đang có mô hình MILP nhằm hoạch định tuyến đường và tối ưu hóa quãng đường di chuyển.\n\n  \n  \n  \n  \n    Hình 2: Mô hình VRP\n  \n  \n  \n  \n    Source: Link to Image\n  \n\nMục tiêu của hàm chính là tìm ra giá trị nhỏ nhất nghĩa là chi phí cho việc di chuyển của xe là nhỏ nhất. Do đó, bạn có thể hình dung rằng giá trị nhỏ nhất đó như là các cá thể đột biến có khả năng sống sót cao nhất trong quẩn thể.\nVì vậy thuật toán Genetic (GA) chính là lặp đi lặp lại sự chọn lọc tự nhiên trong một quần thể hoặc một mẫu để đến cuối cùng tìm ra cá thể vượt trội nhất.\n\n\n\nTrong Machine Learning, GA nhằm tìm ra đúng các biến cần thiết để xây dựng mô hình tốt nhất. Gỉa sử chúng ta có 2 mô hình là:\n\nMô hình 1: gồm các biến A,C,D.\nMô hình 2: gồm biến A,B,E.\n\nVậy mô hình nào mới là tốt nhất cho mô hình dự đoán ? Chúng ta chưa biết được và chỉ có thể so sánh nó thông qua thuật toán Genetic.\nVề quy trình, thuật toán Genetic sẽ có cách hoạt động như dưới đây. Quy trình này mình tham khảo của (Rohith Gandhi 2018).\n\n  \n  \n  \n  \n    Hình 3: Thuật toán Genetic\n  \n  \n  \n  \n    Source: Link to Image\n  \n\nDiễn giải cách hoạt động:\n\nBước 1 (Initialisation): mỗi biến được xem là Gene và nhiều Gene gộp lại thành một mô hình hay gọi là Chromosome và nhiều Chromosome sẽ tạo thành một quần thể (Population). Việc này giống như là bạn đang trình bày hết các phương án có thể sử dụng.\n\n\n  \n  \n  \n  \n    Hình 4: Các thuật ngữ trong GA\n  \n  \n  \n  \n    Source: Link to Image\n  \n\n\nBước 2 (Fitness Function): Bạn cần xây dựng một hàm mục tiêu để tính toán giá trị cho các mô hình ở bước 1.\nBước 3 (Selection): Biến nào có giá trị yếu kém sẽ bị loại và quá trình tính toán sẽ tiếp tục ở thế hệ của nó tiếp theo. Diễn giải đơn giản hơn là chúng ta thử một cách khác và cố gắng cải thiện kết quả.\nBước 4 (Crossover): Tạo ra mô hình gồm các biến tốt đã lựa chọn ở bước 3. Ví dụ như biến A, B là tốt cho mô hình.\nBước 5 (Mutation): Thay đổi mô hình đầu vào đã bao gồm các biến ở bước 4 và bắt đầu lại từ bước 1. Ví dụ mô hình cần chọn gồm 5 biến và ta đã chọn được biến A,B là tốt. Do đó, khi quay lại bước 1, ta chỉ cần chọn thêm 3 biến thay vì 5 biến như thông thường."
  },
  {
    "objectID": "GA.html#vài-điểm-về-thuật-toán-genetic",
    "href": "GA.html#vài-điểm-về-thuật-toán-genetic",
    "title": "Genetic Algorithms in R",
    "section": "",
    "text": "GA hay Genetic Algorithm là 1 thuật toán tối ưu hóa ngẫu nhiên (stochastic search algorithms), được phát triển dựa trên lý thuyết tiến hóa và sự chọn lọc tự nhiên của sinh học (Luca Scrucca 2013).\nỞ thời cấp 3, bạn đã từng học về lý thuyết tiến hóa và chọn lọc tự nhiên của Charles Darwin và Alfred Russel ở môn Sinh học. Nếu bạn cũng từng liệt Sinh như tôi thì bạn quên cũng không sao 😅😅. Vậy thì để tôi giải thích lại như sau:\nSự tiến hóa là sự thay đổi đặc điểm di truyền của 1 quần thể sinh vật, ví dụ điển hình chính là từ loại vượn đã tiến hóa thành hình dạng con người văn minh như các bạn bây giờ. Vậy quá trình tiến hóa đó diễn ra khi có sự chọn lọc tự nhiên tạo ra các biến dị di truyền (Ví dụ: đột biến,…) và kết quả là các cá thể đột biến trở nên phổ biến hơn hoặc hiếm gặp hơn trong quần thể. Vậy điều kiện để xảy ra sự chọn lọc tự nhiên có thể là sự thay đổi về môi trường sống, địa lý,… dẫn tới sự khác nhau về khả năng sống sót và sinh sản.\nKết cục là xuất hiện các cá thể đột biến “mạnh mẽ hơn” hoặc đúng là “đặc biệt hơn” có khả năng tồn tại khi xuất hiện sự thay đổi lớn, ví dụ như dưới đây, do sự thay đổi về địa điểm sống, từ một loại chim sẻ đã phát triển thành 3 phân họ khác nhau.\n\n  \n  \n  \n  \n    Hình 1: Ví dụ về chọn lọc tự nhiên\n  \n  \n  \n  \n    Source: Link to Image\n  \n\nVậy lí thuyết này liên quan gì tới vấn đề tối ưu hóa. Thông thường khi bạn muốn tối ưu hóa một vấn đề gì đó, bạn cần xây dựng mô hình định lượng nó, ví dụ như dưới ảnh này ta đang có mô hình MILP nhằm hoạch định tuyến đường và tối ưu hóa quãng đường di chuyển.\n\n  \n  \n  \n  \n    Hình 2: Mô hình VRP\n  \n  \n  \n  \n    Source: Link to Image\n  \n\nMục tiêu của hàm chính là tìm ra giá trị nhỏ nhất nghĩa là chi phí cho việc di chuyển của xe là nhỏ nhất. Do đó, bạn có thể hình dung rằng giá trị nhỏ nhất đó như là các cá thể đột biến có khả năng sống sót cao nhất trong quẩn thể.\nVì vậy thuật toán Genetic (GA) chính là lặp đi lặp lại sự chọn lọc tự nhiên trong một quần thể hoặc một mẫu để đến cuối cùng tìm ra cá thể vượt trội nhất."
  },
  {
    "objectID": "GA.html#cách-hoạt-động-ga-trong-ml",
    "href": "GA.html#cách-hoạt-động-ga-trong-ml",
    "title": "Genetic Algorithms in R",
    "section": "",
    "text": "Trong Machine Learning, GA nhằm tìm ra đúng các biến cần thiết để xây dựng mô hình tốt nhất. Gỉa sử chúng ta có 2 mô hình là:\n\nMô hình 1: gồm các biến A,C,D.\nMô hình 2: gồm biến A,B,E.\n\nVậy mô hình nào mới là tốt nhất cho mô hình dự đoán ? Chúng ta chưa biết được và chỉ có thể so sánh nó thông qua thuật toán Genetic.\nVề quy trình, thuật toán Genetic sẽ có cách hoạt động như dưới đây. Quy trình này mình tham khảo của (Rohith Gandhi 2018).\n\n  \n  \n  \n  \n    Hình 3: Thuật toán Genetic\n  \n  \n  \n  \n    Source: Link to Image\n  \n\nDiễn giải cách hoạt động:\n\nBước 1 (Initialisation): mỗi biến được xem là Gene và nhiều Gene gộp lại thành một mô hình hay gọi là Chromosome và nhiều Chromosome sẽ tạo thành một quần thể (Population). Việc này giống như là bạn đang trình bày hết các phương án có thể sử dụng.\n\n\n  \n  \n  \n  \n    Hình 4: Các thuật ngữ trong GA\n  \n  \n  \n  \n    Source: Link to Image\n  \n\n\nBước 2 (Fitness Function): Bạn cần xây dựng một hàm mục tiêu để tính toán giá trị cho các mô hình ở bước 1.\nBước 3 (Selection): Biến nào có giá trị yếu kém sẽ bị loại và quá trình tính toán sẽ tiếp tục ở thế hệ của nó tiếp theo. Diễn giải đơn giản hơn là chúng ta thử một cách khác và cố gắng cải thiện kết quả.\nBước 4 (Crossover): Tạo ra mô hình gồm các biến tốt đã lựa chọn ở bước 3. Ví dụ như biến A, B là tốt cho mô hình.\nBước 5 (Mutation): Thay đổi mô hình đầu vào đã bao gồm các biến ở bước 4 và bắt đầu lại từ bước 1. Ví dụ mô hình cần chọn gồm 5 biến và ta đã chọn được biến A,B là tốt. Do đó, khi quay lại bước 1, ta chỉ cần chọn thêm 3 biến thay vì 5 biến như thông thường."
  },
  {
    "objectID": "GA.html#thuật-toán-genetic",
    "href": "GA.html#thuật-toán-genetic",
    "title": "Genetic Algorithms in R",
    "section": "2.1 Thuật toán Genetic:",
    "text": "2.1 Thuật toán Genetic:\nVậy bây giờ chúng ta sẽ xử lí bài toán trên theo thuật toán Genetic\nGỉa sử chúng ta có bài toán về vận chuyển hàng từ nhà kho để thỏa mãn nhu cầu ở các điểm DC (Distribution center). Và công thức để tính toán được chi phí là:\nHàm chi phí tổng thể được xác định như sau:\n\\[\nTC = \\sum_{i=1}^{m} \\left( D_{ij} \\times \\frac{P}{F} \\times 0.4 + LC_i \\right) \\times Q_j\n\\]\nTrong bài toán này, bạn sẽ cần dữ liệu để tính toán 2 thông số là: Phí bốc xếp (Loading cost) và Chi phí vận chuyển (Transportation cost).\nNếu trong công việc thường ngày ở công ty, chúng ta sẽ cần lấy dữ liệu từ Data warehouse bằng SQL hoặc các phần mềm Business Intelligence khác. Ở đây, nhằm mục đích học tập, mình đã tạo ra code ở phía dưới để xây dựng dữ liệu cho các bạn luyện tập.\n\n\nCode\n# Create a data frame for loading costs\nloading_costs &lt;- data.frame(\n  Warehouse = rep(paste(\"WH\", 1:5), each = 4),\n  ID = rep(1:5, times = 4),\n  Weight_Category = rep(c(\"&lt; 2 tons\", \"2 to 5 tons\", \"5 to 10 tons\", \"&gt; 10 tons\"), times = 5),\n  Has_Machine = rep(c(\"Yes\", \"No\", \"Yes\", \"No\", \"No\"), each = 4),\n  Loading_Cost = c(80, 100, 120, 160,  # Warehouse 1 (with machine)\n                   110, 150, 180, 210,  # Warehouse 2 (without machine)\n                   85, 105, 125, 140,  # Warehouse 3 (with machine)\n                   150, 170, 190, 210,  # Warehouse 4 (without machine)\n                   140, 165, 185, 215)   # Warehouse 5 (without machine)\n)\n\n# Set seed for reproducibility\nset.seed(123)\n\n# Define parameters\nweight_categories &lt;- c(\"&lt; 1.5\", \"1.5 to 2.5\", \"2.5 to 5\", \"5 to 10\", \"&gt; 10\")\n# Create the data frame\nloading_costs &lt;- data.frame(\n  Warehouse = rep(1:5, each = 15),  # 5 warehouses, 15 rows each\n  DC = rep(rep(1:3, each = 5), times = 5),  # Repeat 1, 2, 3 for each warehouse\n  Weight_Category = rep(weight_categories, times = 15),  # Repeat categories for 15 rows\n  Loading_Cost = round(runif(75, 5, 150), 2),\n  Has_Machine = sample(c(\"Yes\", \"No\"), 75, replace = TRUE)\n)\n\n# Define warehouses with coordinates (latitude, longitude)\nwarehouses &lt;- data.frame(\n  ID = 1:5,\n  Latitude = c(21.0285, 16.0545, 10.7769, 14.0583, 19.8060), # Example latitudes (Hanoi, HCMC, Da Nang, etc.)\n  Longitude = c(105.804, 108.2022, 106.6957, 108.2772, 105.7460) # Example longitudes\n)\n\n# Define distribution centers data in Vietnam (example coordinates)\ndistribution_centers &lt;- data.frame(\n  ID = 1:3,\n  Demand = c(90, 30, 150),\n  Latitude = c(17.974855, 11.7769, 15.122327), # Example latitudes (Hanoi, Da Nang, HCMC)\n  Longitude = c(102.630867, 106.6957, 108.799357) # Example longitudes\n)\n\n\nNếu bạn từng gặp khó khăn trong việc phải đối mặt với cả đống dữ liệu từ hệ thống và chưa biết lấy dữ liệu nào để phân tích hoặc gộp bảng nào qua bảng nào thì lời khuyên của mình là hãy vẽ bảng Entity relation diagram (ERD).\nERD là một công cụ trực quan dùng để mô tả cấu trúc dữ liệu trong cơ sở dữ liệu. ERD thể hiện các thực thể (entities), thuộc tính (attributes), và các mối quan hệ (relationships) giữa chúng. Các thực thể thường được biểu diễn dưới dạng hình chữ nhật, thuộc tính dưới dạng hình ellips, và mối quan hệ bằng hình thoi hoặc đường nối. ERD giúp lập kế hoạch cho thiết kế cơ sở dữ liệu, đảm bảo rằng các yếu tố dữ liệu và quan hệ giữa chúng được xác định rõ ràng, tạo nền tảng cho việc phát triển và quản lý dữ liệu hiệu quả.\nNhư biểu đồ dưới đây, mình đang có 3 bảng gồm:\n\nBảng thông tin chi tiết về DC.\nBảng thông tin chi tiết về WH.\nBảng giá về loading cost và transportation cost từ WH đến DC.\n\nVà các bạn có thể dễ dàng hình dung các mối quan hệ thông qua bảng Entity relation diagram (ERD) dưới đây:\n\n\n\n\nBiểu đồ 1: EDR model\n\n\n\n\n\n\n\n\nTải package datamodelr:\n\n\n\nMình tạo biểu đồ này bằng thư viện datamodelr. Bạn có thể tải bằng cú pháp: devtools::install_github(\"bergant/datamodelr\")\n\n\n\n2.1.1 Dữ liệu đầu vào:\nNhư vậy, dựa vào đó, ta sẽ tính toán được 2 matrix về chi phí:\n\nBảng giá loading ở các kho. (Hình bên trái)\nBảng chi phí vận chuyển từ từng WH đến các DCs. (Hình bên phải)\n\n\n\nCode\n## Calculate the transportation cost:\n# Haversine distance function\nhaversine &lt;- function(lat1, lon1, lat2, lon2) {\n  R &lt;- 6371 # Radius of Earth in kilometers\n  dlat &lt;- (lat2 - lat1) * pi / 180\n  dlon &lt;- (lon2 - lon1) * pi / 180\n  a &lt;- sin(dlat / 2) * sin(dlat / 2) +\n       cos(lat1 * pi / 180) * cos(lat2 * pi / 180) * \n       sin(dlon / 2) * sin(dlon / 2)\n  c &lt;- 2 * atan2(sqrt(a), sqrt(1 - a))\n  R * c # Distance in kilometers\n}\n\n# Calculate distance matrix based on coordinates\ndistance_matrix &lt;- matrix(0, nrow = nrow(warehouses), ncol = nrow(distribution_centers))\n\nfor (i in 1:nrow(warehouses)) {\n  for (j in 1:nrow(distribution_centers)) {\n    distance_matrix[i, j] &lt;- haversine(\n      warehouses$Latitude[i], warehouses$Longitude[i],\n      distribution_centers$Latitude[j], distribution_centers$Longitude[j]\n    )\n  }\n}\n\n# Define the fuel price (example value)\nfuel_price &lt;- 20 # Fuel price per kilometer\n\n# Calculate transportation costs\ntransportation_costs &lt;- distance_matrix * fuel_price * 0.4\n\n## Calculate the loading cost:\nweights_per_good &lt;- 0.1\n\nmean_loading_cost&lt;-loading_costs |&gt; \n  group_by(DC, Warehouse) |&gt; \n  summarise(mean = mean(Loading_Cost,na.rm = TRUE)/1000/weights_per_good) |&gt; # Assumes weighted of goods is 0.1kg \n  ungroup()\n\nlibrary(data.table)\n# Reshape the data frame to a wide format\nmean_cost_matrix &lt;- reshape2::dcast(mean_loading_cost,\n                          Warehouse ~ DC, \n                          value.var = \"mean\")\n\n# Convert the data frame to a matrix and remove the Warehouse column\nloading_costs_per_dc &lt;- as.matrix(mean_cost_matrix[,-1])\n\n# Set row names as the warehouse names\nrownames(loading_costs_per_dc) &lt;- mean_loading_cost$Warehouse[!duplicated(mean_loading_cost$Warehouse)]\n\n\n\nBảng chi phí bốc xếpBảng giá vận chuyển:\n\n\n\n\n\n\n\nBiểu đồ 2: Heatmap cho bảng chi phí bốc xếp\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLoading Costs by weight category in each warehouses\n\n\nTable just contains expected loading cost\n\n\nWarehouse\nDistribution Center\nWeight Category\nLoading Cost (VNĐ)\nHas Machine\n\n\n\n\nWH 2\nDC 2\n5 to 10\n₫149,170\nYes\n\n\nWH 3\nDC 1\n&lt; 1.5\n₫144,640\nNo\n\n\nWH 1\nDC 3\n&lt; 1.5\n₫143,740\nNo\n\n\nWH 2\nDC 1\n&gt; 10\n₫143,400\nNo\n\n\nWH 1\nDC 1\n&gt; 10\n₫141,370\nNo\n\n\nWH 3\nDC 1\n1.5 to 2.5\n₫135,830\nYes\n\n\n\nSource: package gt in R\n\n\n\n\n\n\nBiểu đồ 3: Bảng giá vận chuyển từ WH đến DC\n\n\n\n\n\n\n\n2.1.2 Xây dựng hàm mục tiêu:\nSau khi đã có đủ dữ liệu, bạn sẽ bắt đầu viết hàm mục tiêu và dùng thuật toán GA để tìm ra giá trị tối ưu nhất.\nTrong hàm ga từ gói GA trong R, có một số đối số quan trọng cho phép bạn tùy chỉnh thuật toán di truyền. Dưới đây là một cái nhìn tổng quan về một số đối số quan trọng:\n\ntype: Chỉ định loại tối ưu hóa (ví dụ: \"real-valued\", \"binary\" hoặc \"permutation\").\nfitness: Hàm đánh giá độ phù hợp; nó nên nhận một vector tham số làm đầu vào và trả về một giá trị số.\nlower và upper: Định nghĩa giới hạn cho các biến nếu bạn đang tối ưu hóa trong không gian liên tục (dùng cho các loại giá trị thực).\npopSize: Thiết lập kích thước quần thể cho mỗi thế hệ.\nmaxiter: Chỉ định số thế hệ tối đa để chạy thuật toán.\nrun: Chỉ định số thế hệ để chạy thuật toán mà không có sự cải thiện trước khi dừng lại.\npmutation: Xác suất xảy ra đột biến trong quần thể.\nelitism: Xác định xem các cá thể tốt nhất có nên được giữ lại trong thế hệ tiếp theo hay không.\n\nNhững đối số này giúp điều chỉnh thuật toán di truyền cho các nhu cầu tối ưu hóa cụ thể của bạn, cho phép hiệu suất tốt hơn và hội tụ về các giải pháp tối ưu.\nNgoài ra, còn có các lưu ý cho bạn khi sử dụng R như sau:\n\n\n\n\n\n\nLưu ý khi dùng hàm ga():\n\n\n\nHàm ga() phải có ít nhất 2 đối số là type và fitness thì R mới chạy được.\n\nRiêng khi type = “binary” thì cần thêm đối số nBits.\nCòn khi type = \"real-valued\"/\"permutation\" thì cần thêm đối số min và max.\n\n\n\n\n\nCode\n# Load necessary library\nlibrary(GA)\ndemand&lt;-c(distribution_centers$Demand)\n\n# Define the objective function\nobjective_function &lt;- function(quantities) {\n    quantities_matrix &lt;- matrix(quantities, \n                                nrow = 5, \n                                ncol = 3, \n                                byrow = TRUE)\n    \n    # Calculate total loading costs\n    loading_costs &lt;- rowSums(quantities_matrix) * loading_costs_per_dc  # Total loading costs for each DC\n    # Calculate total transportation costs\n    transportation_costs &lt;- sum(quantities_matrix * transportation_costs)\n    \n    # Combine both costs\n    total_cost &lt;- sum(loading_costs) + transportation_costs\n    \n    # Check if demands are met\n    if (any(colSums(quantities_matrix) &lt; demand)) {\n        return(Inf)  # Penalize if demands are not met\n    }\n    \n    return(total_cost)\n}\n\n# Set up the Genetic Algorithm\nnum_vars &lt;- 5 * 3  # 5 warehouses, 3 distribution centers\nga_result &lt;- ga(\n    type = \"real-valued\",\n    fitness = function(x) -objective_function(x),  # Negate for minimization\n    lower = rep(0, num_vars),  # Minimum quantity\n    upper = rep(100, num_vars),  # Maximum quantity (adjust as needed)\n    popSize = 50,\n    maxiter = 100,\n    run = 10,\n    monitor = TRUE\n)\n\n\n\n\n\n\n\n\n\n\n\nKết quả tối ưu sẽ được trình bày ở bảng này (hơi màu mè 1 tí!!!)\n\n\n\n\n\n\n\n\n📦 Warehouse Shipment Summary\n\n\nCost Breakdown & Machine Availability\n\n\n🏢 Warehouse\n🏬 Distribution Center\n📦 Total Weight (kg)\n⚖️ Weight Category\n💼 Loading Cost\n🚚 Transport Cost\n💰 Total Cost\n🛠 Machine\n\n\n\n\nWH 1\nDC 1\n3.36\n2.5 to 5\n$64,300.00\n$3,802,097.23\n$3,866,397.23\n✅\n\n\nWH 2\nDC 1\n1.88\n1.5 to 2.5\n$40,680.00\n$5,037,171.35\n$5,077,851.35\n❌\n\n\nWH 3\nDC 1\n1.03\n&lt; 1.5\n$144,640.00\n$7,297,102.21\n$7,441,742.21\n❌\n\n\nWH 4\nDC 1\n1.04\n&lt; 1.5\n$25,130.00\n$5,952,559.68\n$5,977,689.68\n✅\n\n\nWH 5\nDC 1\n1.92\n1.5 to 2.5\n$18,750.00\n$3,086,494.54\n$3,105,244.54\n❌\n\n\nWH 1\nDC 2\n1.17\n&lt; 1.5\n$11,610.00\n$8,264,855.30\n$8,276,465.30\n❌\n\n\nWH 2\nDC 2\n1.65\n1.5 to 2.5\n$105,460.00\n$4,021,256.86\n$4,126,716.86\n✅\n\n\nWH 3\nDC 2\n5.09\n5 to 10\n$51,140.00\n$889,559.41\n$940,699.41\n✅\n\n\nWH 4\nDC 2\n3.80\n2.5 to 5\n$120,840.00\n$2,449,208.30\n$2,570,048.30\n✅\n\n\nWH 5\nDC 2\n1.21\n&lt; 1.5\n$70,030.00\n$7,188,382.30\n$7,258,412.30\n❌\n\n\nWH 1\nDC 3\n1.61\n1.5 to 2.5\n$70,730.00\n$5,831,987.58\n$5,902,717.58\n✅\n\n\nWH 2\nDC 3\n1.92\n1.5 to 2.5\n$83,890.00\n$974,375.33\n$1,058,265.33\n❌\n\n\nWH 3\nDC 3\n3.99\n2.5 to 5\n$64,990.00\n$4,273,915.59\n$4,338,905.59\n❌\n\n\nWH 4\nDC 3\n6.26\n5 to 10\n$134,780.00\n$1,047,828.18\n$1,182,608.18\n❌\n\n\nWH 5\nDC 3\n2.18\n1.5 to 2.5\n$96,240.00\n$4,905,804.62\n$5,002,044.62\n❌"
  },
  {
    "objectID": "GA.html#mô-hình-milp",
    "href": "GA.html#mô-hình-milp",
    "title": "Genetic Algorithms in R",
    "section": "2.2 Mô hình MILP:",
    "text": "2.2 Mô hình MILP:\nTiếp theo ta sẽ chuyển sang thuật toán tuyến tính mới là mô hình MILP.\n\n2.2.1 Giới thiệu sơ lược:\nMILP (Mixed Integer Linear Programming) là một phương pháp tối ưu hóa được sử dụng trong các bài toán lập kế hoạch, phân bổ tài nguyên, và quyết định trong các lĩnh vực như logistics, sản xuất, tài chính, và nhiều lĩnh vực khác. MILP là một phần mở rộng của lập trình tuyến tính (Linear Programming - LP), trong đó có các biến là số nguyên (integer variables) bên cạnh các biến liên tục (continuous variables).\nTrong đó, cấu trúc của một bài toán MILP bao gồm:\n\nHàm mục tiêu: Là một hàm tuyến tính mà bạn muốn tối ưu hóa (tối đa hóa hoặc tối thiểu hóa).\n\\[\n\\text{Maximize or Minimize } Z = c_1x_1 + c_2x_2 + \\ldots + c_nx_n\n\\]\nRàng buộc: Bao gồm các điều kiện tuyến tính mà các biến phải thỏa mãn.\n\\[\na_{11}x_1 + a_{12}x_2 + \\ldots + a_{1n}x_n \\leq b_1\n\\]\n\\[\na_{21}x_1 + a_{22}x_2 + \\ldots + a_{2n}x_n \\leq b_2\n\\]\n… và nhiều ràng buộc khác.\nBiến quyết định: Các biến trong bài toán có thể là:\n\nBiến liên tục: Có thể nhận mọi giá trị thực (ví dụ: số lượng sản phẩm).\nBiến nguyên: Chỉ nhận giá trị nguyên (ví dụ: số lượng xe tải).\nBiến nhị phân: Chỉ nhận giá trị 0 hoặc 1 (ví dụ: có hoặc không sử dụng một nhà máy).\n\n\nMô hình MILP là một công cụ mạnh mẽ cho việc tối ưu hóa trong nhiều lĩnh vực khác nhau. Với khả năng kết hợp giữa các biến liên tục và số nguyên, MILP có thể giải quyết nhiều bài toán phức tạp mà các phương pháp tối ưu hóa khác không thể thực hiện hiệu quả. Các ứng dụng phổ biến bao gồm:\n\nQuản lý chuỗi cung ứng: Tối ưu hóa việc phân phối hàng hóa từ các kho đến các khách hàng.\nLập kế hoạch sản xuất: Xác định số lượng sản phẩm cần sản xuất để tối đa hóa lợi nhuận hoặc giảm chi phí.\nTối ưu hóa lịch trình: Lập lịch cho nhân viên, máy móc, hoặc tài nguyên để tối ưu hóa hiệu suất.\nQuy hoạch đô thị: Tối ưu hóa việc sử dụng đất và tài nguyên trong quy hoạch thành phố.\n\nTrong R có các thư viện như lpSolve, ompr, và ROI có thể được sử dụng để giải quyết các bài toán MILP.\n\n\n2.2.2 Ví dụ về mô hình MILP:\nGỉa sử ta có bài toán về vấn đề Transshipment có yêu cầu là tìm ra phương án vận tải tối ưu nhất để vận chuyển hàng hóa từ nhà máy (Factory) thông qua Crossdocking và đến được Distribution Center với mục tiêu là đạt chi phí thấp nhất.\n\n  \n  \n  \n  \n    Hình 5: Vấn đề Transshipment\n  \n  \n  \n  \n    Source: Rstudio\n  \n\nVì bài toán này thuộc dạng tuyến tính nên phương pháp MILP sẽ làm tốt hơn nhiều so với thuật toán GA bên trên. Kết quả được trình bày bên dưới đây\n\n\nCode\nlibrary(ompr)\nlibrary(ompr.roi)\nlibrary(ROI.plugin.glpk)\n#Input:\nSupply &lt;-c(200,300,100,150,220)\nDemand &lt;-c(150,100,110,200,180)\nDC&lt;-2\nm&lt;-length(Supply)\nn&lt;-length(Demand)\n\nCost_CD&lt;-read.table(text = \n                    \"CD1 CD2\n                     30 50\n                     23 66\n                     35 14\n                     70 12\n                     65 70\",header = T)\nCost_DC&lt;-read.table(text = \n                      \"DC1 DC2 DC3 DC4 DC5\n                       12 25 22 40 41\n                       65 22 23 12 15\",header = T)\n\n#MILP model from the \nmodel5 &lt;- MIPModel() %&gt;%\n  # Add variable\n  add_variable(x[i, j], i = 1:m, j = 1:DC) %&gt;%\n  add_variable(y[j, k], j = 1:DC, k = 1:n) %&gt;%\n  # minimize the cost of transshipment:\n  set_objective(sum_expr(x[i, j]*Cost_CD[i, j],i = 1:m, j = 1:DC)+ sum_expr(y[j, k]*Cost_DC[j, k], k = 1:n, j = 1:DC),\"min\") %&gt;%\n  add_constraint(sum_expr(y[j, k], j = 1:DC) &gt;= Demand[k], k = 1:n) %&gt;%\n  # The amount of inventory in Crossdocking is smaller than production goods\n  add_constraint(sum_expr(x[i, j], j = 1:DC) &lt;= Supply[i], i = 1:m) %&gt;% \n  # The amount of is bigger than demand in DC\n  add_constraint(sum_expr(x[i, j], i = 1:m) - sum_expr(y[j, k], k = 1:n) &gt;= 0,j = 1:DC) %&gt;%\n  add_constraint(x[i, j] &gt;= 0, j = 1:DC, i = 1:m)%&gt;% \n  add_constraint(y[j, k] &gt;= 0, j = 1:DC, k = 1:n)%&gt;% \n  #Solve the model:\n  solve_model(with_ROI(solver = \"glpk\", verbose = TRUE))\n\n\n\n\n\n\n\n\n\n\nTransshipment flows from Manufacturers to Distribution Centers\n\n\nManufacturer\nDistribution Center\nFlow Amount\n\n\n\n\nManufacturer 1\nDC 1\n60.00\n\n\nManufacturer 2\nDC 1\n300.00\n\n\nManufacturer 1\nDC 2\n130.00\n\n\nManufacturer 3\nDC 2\n100.00\n\n\nManufacturer 4\nDC 2\n150.00\n\n\n\n\n\n\n\n\n\n\nNhư vậy, chúng ta đã được học về thuật toán Genetic và mô hình MILP cũng như cách thực hiện trong Rstudio.\nNếu bạn có câu hỏi hay thắc mắc nào, đừng ngần ngại liên hệ với mình qua Gmail. Bên cạnh đó, nếu bạn muốn xem lại các bài viết trước đây của mình, hãy nhấn vào hai nút dưới đây để truy cập trang Rpubs hoặc mã nguồn trên Github. Rất vui được đồng hành cùng bạn, hẹn gặp lại! 😄😄😄\n\n\n\n\n\n  \n  \n  Contact Me\n  \n  \n  \n  \n\n  \n\n\n\n  \n    \n      \n      \n        \n          \n        \n        Contact Me\n      \n\n      \n      \n        \n          \n             GitHub\n          \n          \n             RPubs\n          \n          \n             LinkedIn\n          \n        \n      \n\n      \n      \n        \n          \n            Your Name\n            \n          \n\n          \n            Your Email\n            \n          \n\n          \n            Subject\n            \n              General Inquiry\n              Collaboration\n              Project Help\n              Other\n            \n          \n\n          \n            Message\n            \n          \n\n          \n\n          \n            \n               Send Message"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Cao Xuân Lộc",
    "section": "",
    "text": "Xin chào, mình là Lộc, sinh năm 2003 và là một chàng trai đến từ mảnh đất đầy nắng và gió - Phú Yên, Việt Nam. Mình có bằng cử nhân trường Đại học Kinh Tế - Tài Chính (UEF) và chuyên ngành của mình là Logistics và quản lý chuỗi cung ứng.\nLà người có niềm đam mê mạnh mẽ với R, mình có sở thích viết post về việc phân tích dữ liệu với R để ứng dụng vào các công việc, bài toán thường gặp trong Supply Chain. Ngoài ra, sở thích của mình là nghe sách nói và đi bộ!\nCâu slogan mà mình thích nhất là: “Don’t fear the risk, fear the opportunity lost!” và đó cũng là cách mình sống và làm việc 💝💝💝.\nHi vọng các bạn sẽ thích bài viết của mình!\n    \n    \n    Go to Next Page\n    \n    \n        \n            Go to Next Page\n            ➔"
  },
  {
    "objectID": "example.html",
    "href": "example.html",
    "title": "Custom Callouts with Chart",
    "section": "",
    "text": "1 Custom Callouts Test with Chart\n\n\n\n\n\n\nNote\n\n\n\nThis is a note callout. It uses a calm blue tone to highlight general information.\n\n\n\n\n\n\n\n\nTip\n\n\n\nThis is a tip callout. It provides helpful suggestions or best practices.\n\n\n\n\n\n\n\n\nCaution\n\n\n\nThis is a caution callout. It warns the reader to be careful but not alarmed.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThis is a warning callout. It’s a bit more serious and should draw attention.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThis is an important callout. It uses a strong red tone to highlight crucial content.\n\n\n\n\n2 Example Chart\nBelow is a simple bar chart rendered with ggplot2:\n\nlibrary(ggplot2)\n\ndata &lt;- data.frame(\n  category = c(\"A\", \"B\", \"C\", \"D\"),\n  value = c(4, 7, 1, 9)\n)\n\nggplot(data, aes(x = category, y = value, fill = category)) +\n  geom_bar(stat = \"identity\") +\n  theme_minimal() +\n  labs(title = \"Sample Bar Chart\", x = \"Category\", y = \"Value\") +\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "MILP.html",
    "href": "MILP.html",
    "title": "MILP model in R",
    "section": "",
    "text": "Tiếp theo ta sẽ chuyển sang thuật toán tuyến tính mới là mô hình MILP.\n\n\nMILP (Mixed Integer Linear Programming) là một phương pháp tối ưu hóa được sử dụng trong các bài toán lập kế hoạch, phân bổ tài nguyên, và quyết định trong các lĩnh vực như logistics, sản xuất, tài chính, và nhiều lĩnh vực khác. MILP là một phần mở rộng của lập trình tuyến tính (Linear Programming - LP), trong đó có các biến là số nguyên (integer variables) bên cạnh các biến liên tục (continuous variables).\nTrong đó, cấu trúc của một bài toán MILP bao gồm:\n\nHàm mục tiêu: Là một hàm tuyến tính mà bạn muốn tối ưu hóa (tối đa hóa hoặc tối thiểu hóa).\n\\[\n\\text{Maximize or Minimize } Z = c_1x_1 + c_2x_2 + \\ldots + c_nx_n\n\\]\nRàng buộc: Bao gồm các điều kiện tuyến tính mà các biến phải thỏa mãn.\n\\[\na_{11}x_1 + a_{12}x_2 + \\ldots + a_{1n}x_n \\leq b_1\n\\]\n\\[\na_{21}x_1 + a_{22}x_2 + \\ldots + a_{2n}x_n \\leq b_2\n\\]\n… và nhiều ràng buộc khác.\nBiến quyết định: Các biến trong bài toán có thể là:\n\nBiến liên tục: Có thể nhận mọi giá trị thực (ví dụ: số lượng sản phẩm).\nBiến nguyên: Chỉ nhận giá trị nguyên (ví dụ: số lượng xe tải).\nBiến nhị phân: Chỉ nhận giá trị 0 hoặc 1 (ví dụ: có hoặc không sử dụng một nhà máy).\n\n\nMô hình MILP là một công cụ mạnh mẽ cho việc tối ưu hóa trong nhiều lĩnh vực khác nhau. Với khả năng kết hợp giữa các biến liên tục và số nguyên, MILP có thể giải quyết nhiều bài toán phức tạp mà các phương pháp tối ưu hóa khác không thể thực hiện hiệu quả. Các ứng dụng phổ biến bao gồm:\n\nQuản lý chuỗi cung ứng: Tối ưu hóa việc phân phối hàng hóa từ các kho đến các khách hàng.\nLập kế hoạch sản xuất: Xác định số lượng sản phẩm cần sản xuất để tối đa hóa lợi nhuận hoặc giảm chi phí.\nTối ưu hóa lịch trình: Lập lịch cho nhân viên, máy móc, hoặc tài nguyên để tối ưu hóa hiệu suất.\nQuy hoạch đô thị: Tối ưu hóa việc sử dụng đất và tài nguyên trong quy hoạch thành phố.\n\nTrong R có các thư viện như lpSolve, ompr, và ROI có thể được sử dụng để giải quyết các bài toán MILP.\n\n\n\nGỉa sử ta có bài toán về vấn đề Transshipment có yêu cầu là tìm ra phương án vận tải tối ưu nhất để vận chuyển hàng hóa từ nhà máy (Factory) thông qua Crossdocking và đến được Distribution Center với mục tiêu là đạt chi phí thấp nhất.\n\n  \n  \n  \n  \n    Hình 5: Vấn đề Transshipment\n  \n  \n  \n  \n    Source: Rstudio\n  \n\nVì bài toán này thuộc dạng tuyến tính nên phương pháp MILP sẽ làm tốt hơn nhiều so với thuật toán GA bên trên. Kết quả được trình bày bên dưới đây\n\n\nCode\nlibrary(ompr)\nlibrary(ompr.roi)\nlibrary(ROI.plugin.glpk)\n#Input:\nSupply &lt;-c(200,300,100,150,220)\nDemand &lt;-c(150,100,110,200,180)\nDC&lt;-2\nm&lt;-length(Supply)\nn&lt;-length(Demand)\n\nCost_CD&lt;-read.table(text = \n                    \"CD1 CD2\n                     30 50\n                     23 66\n                     35 14\n                     70 12\n                     65 70\",header = T)\nCost_DC&lt;-read.table(text = \n                      \"DC1 DC2 DC3 DC4 DC5\n                       12 25 22 40 41\n                       65 22 23 12 15\",header = T)\n\n#MILP model from the \nmodel5 &lt;- MIPModel() %&gt;%\n  # Add variable\n  add_variable(x[i, j], i = 1:m, j = 1:DC) %&gt;%\n  add_variable(y[j, k], j = 1:DC, k = 1:n) %&gt;%\n  # minimize the cost of transshipment:\n  set_objective(sum_expr(x[i, j]*Cost_CD[i, j],i = 1:m, j = 1:DC)+ sum_expr(y[j, k]*Cost_DC[j, k], k = 1:n, j = 1:DC),\"min\") %&gt;%\n  add_constraint(sum_expr(y[j, k], j = 1:DC) &gt;= Demand[k], k = 1:n) %&gt;%\n  # The amount of inventory in Crossdocking is smaller than production goods\n  add_constraint(sum_expr(x[i, j], j = 1:DC) &lt;= Supply[i], i = 1:m) %&gt;% \n  # The amount of is bigger than demand in DC\n  add_constraint(sum_expr(x[i, j], i = 1:m) - sum_expr(y[j, k], k = 1:n) &gt;= 0,j = 1:DC) %&gt;%\n  add_constraint(x[i, j] &gt;= 0, j = 1:DC, i = 1:m)%&gt;% \n  add_constraint(y[j, k] &gt;= 0, j = 1:DC, k = 1:n)%&gt;% \n  #Solve the model:\n  solve_model(with_ROI(solver = \"glpk\", verbose = TRUE))\n\n\n\n\n\n\n\n\n\n\nTransshipment flows from Manufacturers to Distribution Centers\n\n\nManufacturer\nDistribution Center\nFlow Amount\n\n\n\n\nManufacturer 1\nDC 1\n60.00\n\n\nManufacturer 2\nDC 1\n300.00\n\n\nManufacturer 1\nDC 2\n130.00\n\n\nManufacturer 3\nDC 2\n100.00\n\n\nManufacturer 4\nDC 2\n150.00\n\n\n\n\n\n\n\n\n\n\nNhư vậy, chúng ta đã được học về thuật toán Genetic và mô hình MILP cũng như cách thực hiện trong Rstudio.\nNếu bạn có câu hỏi hay thắc mắc nào, đừng ngần ngại liên hệ với mình qua Gmail. Bên cạnh đó, nếu bạn muốn xem lại các bài viết trước đây của mình, hãy nhấn vào hai nút dưới đây để truy cập trang Rpubs hoặc mã nguồn trên Github. Rất vui được đồng hành cùng bạn, hẹn gặp lại! 😄😄😄\n\n\n\n\n\n  \n  \n  Contact Me\n  \n  \n  \n  \n\n  \n\n\n\n  \n    \n      \n      \n        \n          \n        \n        \n      \n\n      \n      \n        \n          \n             GitHub\n          \n          \n             RPubs\n          \n          \n             LinkedIn\n          \n        \n      \n\n      \n      \n        \n          \n            Your Name\n            \n          \n\n          \n            Your Email\n            \n          \n\n          \n            Subject\n            \n              General Inquiry\n              Collaboration\n              Project Help\n              Other\n            \n          \n\n          \n            Message\n            \n          \n\n          \n\n          \n            \n               Send Message"
  },
  {
    "objectID": "MILP.html#mô-hình-milp",
    "href": "MILP.html#mô-hình-milp",
    "title": "MILP model in R",
    "section": "",
    "text": "Tiếp theo ta sẽ chuyển sang thuật toán tuyến tính mới là mô hình MILP.\n\n\nMILP (Mixed Integer Linear Programming) là một phương pháp tối ưu hóa được sử dụng trong các bài toán lập kế hoạch, phân bổ tài nguyên, và quyết định trong các lĩnh vực như logistics, sản xuất, tài chính, và nhiều lĩnh vực khác. MILP là một phần mở rộng của lập trình tuyến tính (Linear Programming - LP), trong đó có các biến là số nguyên (integer variables) bên cạnh các biến liên tục (continuous variables).\nTrong đó, cấu trúc của một bài toán MILP bao gồm:\n\nHàm mục tiêu: Là một hàm tuyến tính mà bạn muốn tối ưu hóa (tối đa hóa hoặc tối thiểu hóa).\n\\[\n\\text{Maximize or Minimize } Z = c_1x_1 + c_2x_2 + \\ldots + c_nx_n\n\\]\nRàng buộc: Bao gồm các điều kiện tuyến tính mà các biến phải thỏa mãn.\n\\[\na_{11}x_1 + a_{12}x_2 + \\ldots + a_{1n}x_n \\leq b_1\n\\]\n\\[\na_{21}x_1 + a_{22}x_2 + \\ldots + a_{2n}x_n \\leq b_2\n\\]\n… và nhiều ràng buộc khác.\nBiến quyết định: Các biến trong bài toán có thể là:\n\nBiến liên tục: Có thể nhận mọi giá trị thực (ví dụ: số lượng sản phẩm).\nBiến nguyên: Chỉ nhận giá trị nguyên (ví dụ: số lượng xe tải).\nBiến nhị phân: Chỉ nhận giá trị 0 hoặc 1 (ví dụ: có hoặc không sử dụng một nhà máy).\n\n\nMô hình MILP là một công cụ mạnh mẽ cho việc tối ưu hóa trong nhiều lĩnh vực khác nhau. Với khả năng kết hợp giữa các biến liên tục và số nguyên, MILP có thể giải quyết nhiều bài toán phức tạp mà các phương pháp tối ưu hóa khác không thể thực hiện hiệu quả. Các ứng dụng phổ biến bao gồm:\n\nQuản lý chuỗi cung ứng: Tối ưu hóa việc phân phối hàng hóa từ các kho đến các khách hàng.\nLập kế hoạch sản xuất: Xác định số lượng sản phẩm cần sản xuất để tối đa hóa lợi nhuận hoặc giảm chi phí.\nTối ưu hóa lịch trình: Lập lịch cho nhân viên, máy móc, hoặc tài nguyên để tối ưu hóa hiệu suất.\nQuy hoạch đô thị: Tối ưu hóa việc sử dụng đất và tài nguyên trong quy hoạch thành phố.\n\nTrong R có các thư viện như lpSolve, ompr, và ROI có thể được sử dụng để giải quyết các bài toán MILP.\n\n\n\nGỉa sử ta có bài toán về vấn đề Transshipment có yêu cầu là tìm ra phương án vận tải tối ưu nhất để vận chuyển hàng hóa từ nhà máy (Factory) thông qua Crossdocking và đến được Distribution Center với mục tiêu là đạt chi phí thấp nhất.\n\n  \n  \n  \n  \n    Hình 5: Vấn đề Transshipment\n  \n  \n  \n  \n    Source: Rstudio\n  \n\nVì bài toán này thuộc dạng tuyến tính nên phương pháp MILP sẽ làm tốt hơn nhiều so với thuật toán GA bên trên. Kết quả được trình bày bên dưới đây\n\n\nCode\nlibrary(ompr)\nlibrary(ompr.roi)\nlibrary(ROI.plugin.glpk)\n#Input:\nSupply &lt;-c(200,300,100,150,220)\nDemand &lt;-c(150,100,110,200,180)\nDC&lt;-2\nm&lt;-length(Supply)\nn&lt;-length(Demand)\n\nCost_CD&lt;-read.table(text = \n                    \"CD1 CD2\n                     30 50\n                     23 66\n                     35 14\n                     70 12\n                     65 70\",header = T)\nCost_DC&lt;-read.table(text = \n                      \"DC1 DC2 DC3 DC4 DC5\n                       12 25 22 40 41\n                       65 22 23 12 15\",header = T)\n\n#MILP model from the \nmodel5 &lt;- MIPModel() %&gt;%\n  # Add variable\n  add_variable(x[i, j], i = 1:m, j = 1:DC) %&gt;%\n  add_variable(y[j, k], j = 1:DC, k = 1:n) %&gt;%\n  # minimize the cost of transshipment:\n  set_objective(sum_expr(x[i, j]*Cost_CD[i, j],i = 1:m, j = 1:DC)+ sum_expr(y[j, k]*Cost_DC[j, k], k = 1:n, j = 1:DC),\"min\") %&gt;%\n  add_constraint(sum_expr(y[j, k], j = 1:DC) &gt;= Demand[k], k = 1:n) %&gt;%\n  # The amount of inventory in Crossdocking is smaller than production goods\n  add_constraint(sum_expr(x[i, j], j = 1:DC) &lt;= Supply[i], i = 1:m) %&gt;% \n  # The amount of is bigger than demand in DC\n  add_constraint(sum_expr(x[i, j], i = 1:m) - sum_expr(y[j, k], k = 1:n) &gt;= 0,j = 1:DC) %&gt;%\n  add_constraint(x[i, j] &gt;= 0, j = 1:DC, i = 1:m)%&gt;% \n  add_constraint(y[j, k] &gt;= 0, j = 1:DC, k = 1:n)%&gt;% \n  #Solve the model:\n  solve_model(with_ROI(solver = \"glpk\", verbose = TRUE))\n\n\n\n\n\n\n\n\n\n\nTransshipment flows from Manufacturers to Distribution Centers\n\n\nManufacturer\nDistribution Center\nFlow Amount\n\n\n\n\nManufacturer 1\nDC 1\n60.00\n\n\nManufacturer 2\nDC 1\n300.00\n\n\nManufacturer 1\nDC 2\n130.00\n\n\nManufacturer 3\nDC 2\n100.00\n\n\nManufacturer 4\nDC 2\n150.00\n\n\n\n\n\n\n\n\n\n\nNhư vậy, chúng ta đã được học về thuật toán Genetic và mô hình MILP cũng như cách thực hiện trong Rstudio.\nNếu bạn có câu hỏi hay thắc mắc nào, đừng ngần ngại liên hệ với mình qua Gmail. Bên cạnh đó, nếu bạn muốn xem lại các bài viết trước đây của mình, hãy nhấn vào hai nút dưới đây để truy cập trang Rpubs hoặc mã nguồn trên Github. Rất vui được đồng hành cùng bạn, hẹn gặp lại! 😄😄😄\n\n\n\n\n\n  \n  \n  Contact Me\n  \n  \n  \n  \n\n  \n\n\n\n  \n    \n      \n      \n        \n          \n        \n        \n      \n\n      \n      \n        \n          \n             GitHub\n          \n          \n             RPubs\n          \n          \n             LinkedIn\n          \n        \n      \n\n      \n      \n        \n          \n            Your Name\n            \n          \n\n          \n            Your Email\n            \n          \n\n          \n            Subject\n            \n              General Inquiry\n              Collaboration\n              Project Help\n              Other\n            \n          \n\n          \n            Message\n            \n          \n\n          \n\n          \n            \n               Send Message"
  }
]